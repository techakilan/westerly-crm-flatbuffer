// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod leads {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum LeadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Lead<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Lead<'a> {
    type Inner = Lead<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Lead<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Lead { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args LeadArgs<'args>) -> flatbuffers::WIPOffset<Lead<'bldr>> {
      let mut builder = LeadBuilder::new(_fbb);
      if let Some(x) = args.lastname { builder.add_lastname(x); }
      if let Some(x) = args.firstname { builder.add_firstname(x); }
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_FIRSTNAME: flatbuffers::VOffsetT = 6;
    pub const VT_LASTNAME: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> i32 {
    self._tab.get::<i32>(Lead::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn firstname(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Lead::VT_FIRSTNAME, None)
  }
  #[inline]
  pub fn lastname(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Lead::VT_LASTNAME, None)
  }
}

impl flatbuffers::Verifiable for Lead<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>(&"id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"firstname", Self::VT_FIRSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"lastname", Self::VT_LASTNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct LeadArgs<'a> {
    pub id: i32,
    pub firstname: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastname: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LeadArgs<'a> {
    #[inline]
    fn default() -> Self {
        LeadArgs {
            id: 0,
            firstname: None,
            lastname: None,
        }
    }
}
pub struct LeadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LeadBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(Lead::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_firstname(&mut self, firstname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Lead::VT_FIRSTNAME, firstname);
  }
  #[inline]
  pub fn add_lastname(&mut self, lastname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Lead::VT_LASTNAME, lastname);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LeadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LeadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Lead<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Lead<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Lead");
      ds.field("id", &self.id());
      ds.field("firstname", &self.firstname());
      ds.field("lastname", &self.lastname());
      ds.finish()
  }
}
pub enum ListLeadFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ListLeadFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ListLeadFb<'a> {
    type Inner = ListLeadFb<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> ListLeadFb<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ListLeadFb { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ListLeadFbArgs<'args>) -> flatbuffers::WIPOffset<ListLeadFb<'bldr>> {
      let mut builder = ListLeadFbBuilder::new(_fbb);
      if let Some(x) = args.list { builder.add_list(x); }
      builder.finish()
    }

    pub const VT_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Lead<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Lead>>>>(ListLeadFb::VT_LIST, None)
  }
}

impl flatbuffers::Verifiable for ListLeadFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Lead>>>>(&"list", Self::VT_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct ListLeadFbArgs<'a> {
    pub list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Lead<'a>>>>>,
}
impl<'a> Default for ListLeadFbArgs<'a> {
    #[inline]
    fn default() -> Self {
        ListLeadFbArgs {
            list: None,
        }
    }
}
pub struct ListLeadFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ListLeadFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_list(&mut self, list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Lead<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListLeadFb::VT_LIST, list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ListLeadFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ListLeadFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ListLeadFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for ListLeadFb<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("ListLeadFb");
      ds.field("list", &self.list());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_list_lead_fb<'a>(buf: &'a [u8]) -> ListLeadFb<'a> {
  unsafe { flatbuffers::root_unchecked::<ListLeadFb<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_list_lead_fb<'a>(buf: &'a [u8]) -> ListLeadFb<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ListLeadFb<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ListLeadFb`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_list_lead_fb_unchecked`.
pub fn root_as_list_lead_fb(buf: &[u8]) -> Result<ListLeadFb, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ListLeadFb>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ListLeadFb` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_list_lead_fb_unchecked`.
pub fn size_prefixed_root_as_list_lead_fb(buf: &[u8]) -> Result<ListLeadFb, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ListLeadFb>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ListLeadFb` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_list_lead_fb_unchecked`.
pub fn root_as_list_lead_fb_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ListLeadFb<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ListLeadFb<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ListLeadFb` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_list_lead_fb_unchecked`.
pub fn size_prefixed_root_as_list_lead_fb_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ListLeadFb<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ListLeadFb<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ListLeadFb and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ListLeadFb`.
pub unsafe fn root_as_list_lead_fb_unchecked(buf: &[u8]) -> ListLeadFb {
  flatbuffers::root_unchecked::<ListLeadFb>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ListLeadFb and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ListLeadFb`.
pub unsafe fn size_prefixed_root_as_list_lead_fb_unchecked(buf: &[u8]) -> ListLeadFb {
  flatbuffers::size_prefixed_root_unchecked::<ListLeadFb>(buf)
}
#[inline]
pub fn finish_list_lead_fb_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ListLeadFb<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_list_lead_fb_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ListLeadFb<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod leads

